// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// read_fa
DataFrame read_fa(String file);
RcppExport SEXP _biox_read_fa(SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type file(fileSEXP);
    rcpp_result_gen = Rcpp::wrap(read_fa(file));
    return rcpp_result_gen;
END_RCPP
}
// read_fq
DataFrame read_fq(String file);
RcppExport SEXP _biox_read_fq(SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type file(fileSEXP);
    rcpp_result_gen = Rcpp::wrap(read_fq(file));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _biox_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rdna
StringVector rdna(int n, int l);
RcppExport SEXP _biox_rdna(SEXP nSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(rdna(n, l));
    return rcpp_result_gen;
END_RCPP
}
// rrna
StringVector rrna(int n, int l);
RcppExport SEXP _biox_rrna(SEXP nSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(rrna(n, l));
    return rcpp_result_gen;
END_RCPP
}
// revcomp
StringVector revcomp(StringVector ss);
RcppExport SEXP _biox_revcomp(SEXP ssSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type ss(ssSEXP);
    rcpp_result_gen = Rcpp::wrap(revcomp(ss));
    return rcpp_result_gen;
END_RCPP
}
// kmers
StringVector kmers(String s, int k);
RcppExport SEXP _biox_kmers(SEXP sSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(kmers(s, k));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_biox_read_fa", (DL_FUNC) &_biox_read_fa, 1},
    {"_biox_read_fq", (DL_FUNC) &_biox_read_fq, 1},
    {"_biox_rcpp_hello_world", (DL_FUNC) &_biox_rcpp_hello_world, 0},
    {"_biox_rdna", (DL_FUNC) &_biox_rdna, 2},
    {"_biox_rrna", (DL_FUNC) &_biox_rrna, 2},
    {"_biox_revcomp", (DL_FUNC) &_biox_revcomp, 1},
    {"_biox_kmers", (DL_FUNC) &_biox_kmers, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_biox(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
